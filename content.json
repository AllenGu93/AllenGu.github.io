[{"title":"浅析静态变量【转】","date":"2017-04-08T10:03:26.000Z","path":"2017/04/08/php-3/","text":"通常意义上静态变量是静态分配的，他们的生命周期和程序的生命周期一样， 只有在程序退出时才结束期生命周期，这和局部变量相反，有的语言中全局变量也是静态分配的。 例如PHP和Javascript中的全局变量。 静态变量可以分为： 静态全局变量，PHP中的全局变量也可以理解为静态全局变量，因为除非明确unset释放，在程序运行过程中始终存在。 静态局部变量，也就是在函数内定义的静态变量，函数在执行时对变量的操作会保持到下一次函数被调用。 静态成员变量，这是在类中定义的静态变量，和实例变量相对应，静态成员变量可以在所有实例中共享。 最常见的是静态局部变量及静态成员变量。局部变量只有在函数执行时才会存在。 通常，当一个函数执行完毕，它的局部变量的值就已经不存在，而且变量所占据的内存也被释放。 当下一次执行该过程时，它的所有局部变量将重新初始化。如果某个局部变量定义为静态的， 则它的值不会在函数调用结束后释放，而是继续保留变量的值。 12345678910111213public function t() &#123; static $i = 0; $i++; echo $i, ' ';&#125;public function getMy()&#123; $this-&gt;t(); $this-&gt;t(); $this-&gt;t(); $this-&gt;t();&#125; 没错，结果就是1,2,3,4。 不要被t函数开头的初始化所迷惑，这个对局部静态变量没有鸟用，你可以这样理解，函数内的静态变量是对这个函数而言的全局变量，不会释放。","tags":[{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"},{"name":"静态变量","slug":"静态变量","permalink":"http://yoursite.com/tags/静态变量/"}]},{"title":"后台面包屑导航类的分析","date":"2017-04-08T09:41:03.000Z","path":"2017/04/08/php-2/","text":"今天又去扒赵哥的里昂官网的源码，每次膝盖都是血肉模糊……应该以后会好一点^_^ 首先这个封装好的类让我这个最初接触php的我觉得很难，现在想想，真的没啥难的，如果说难，那就是php基础之前真的太差，对很多概念的理解不透彻，好了，切入正文。 这个类的源码先贴出来。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;?php class BreadCrumb&#123; public $title; public $url; protected static $items; public function __construct($title, $url=null) &#123; $this-&gt;title = $title; $this-&gt;url = $url; &#125; public static function push($title, $url=null) &#123; return static::items()-&gt;push(new Breadcrumb($title, $url)); &#125; public function isLast() &#123; $last = static::items()-&gt;last(); return $last-&gt;url == $this-&gt;url; &#125; /** * Handle dynamic method calls into the method. * * @param string $method * @param array $parameters * @return mixed */ public function __call($method, $parameters) &#123; return call_user_func_array(array(static::items(), $method), $parameters); &#125; public static function items() &#123; if (null == static::$items) &#123; static::$items = new Collection(); &#125; return static::$items; &#125; /** * Handle dynamic static method calls into the method. * * @param string $method * @param array $parameters * @return mixed */ public static function __callStatic($method, $parameters) &#123; return call_user_func_array(array(static::items(), $method), $parameters); &#125; &#125; 寥寥数行代码要分析的主要是，额，思想。对，就是封装，继承的思想。这个在我一开学php的时候觉得没什么东西啊，现在想想，图样图森破！一个菜鸟和高手的差别就在这里，Don‘t Repeat Yourself——赵哥箴言。当然这是一个优秀的程序员的基本功。对于后台来说，面包屑是再常用不过的东西，不封装好，会给你之后带来更多麻烦，而继承呢，一定要把根节点在基类里定义好，这样才能做到面包屑的根节点-&gt;子节点的效果。其次，对于类变量的使用也是一个亮点。好了，我把基类的代码也贴出来。123456789public function __construct() &#123; View::addLocation(app_path() . '/themes/admin'); parent::__construct(); BreadCrumb::push('管理中心', action('Admin\\DashboardController@getIndex')); &#125; 最为重要的初始化代码，把根节点push到一个空的collection中，然后继承了基类的子类可以继续通过push将要添加的子节点送入collection中，这也是实现面包屑的核心思想。至于代码，我承认现在的我可能想不到这样写，但是我一定要努力向这样coding。 DONT REPEAT YOURSELF!","tags":[{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"},{"name":"静态变量","slug":"静态变量","permalink":"http://yoursite.com/tags/静态变量/"},{"name":"laravel","slug":"laravel","permalink":"http://yoursite.com/tags/laravel/"}]},{"title":"后期静态绑定","date":"2017-04-08T08:26:38.000Z","path":"2017/04/08/php-1/","text":"后期静态绑定","tags":[{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"}]},{"title":"命名空间的再理解","date":"2017-04-08T07:45:40.000Z","path":"2017/04/08/php-0/","text":"命名空间是类的文件夹，可以防止你的类名与框架作者或者团队其他人员冲突，那么，如果在不定义这个命名空间会发生什么？答案是没什么问题，如果你不定义就默认放到全局，那么除非你要用’全局’这个类文件夹以外的类文件需要定义，否则就不用再use了，因为聪明的php已经默认是从当前文件夹里取出你要的类。那么在非全局命名空间怎么去调用全局空间的类呢，很简单，linux根目录是/,在php中类似，不过是\\。就是这么简单。 很简单，不要瞎想。多联想，举一反三。","tags":[{"name":"命名空间","slug":"命名空间","permalink":"http://yoursite.com/tags/命名空间/"},{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"}]},{"title":"忙里偷闲","date":"2017-04-06T13:06:21.000Z","path":"2017/04/06/thoughts-2/","text":"上一次正了八经放假得追溯到半个多月前吧，最近每天睁开眼都觉得做完好像和别人打了一架，很累，完全没有一觉醒来满血复活的感觉。迫于各种原因和赵哥请了一天假，真的想出去走走，看看。 上午收拾了一上午的屋子，洗洗衣服，毕竟也很乱了，每次收拾好总觉得可以保持，可惜从没有。以后不要给自己太多压力，很多事情可能真的是从小就养成的习惯，很难改正，就像那个被赵哥扣去的大写切换键一样。下午就比较精彩了，做123路到泉城广场，把路上积累的液体排泄到恒隆高大上的洗手间，顿时整个人都舒坦了，一路向北，路过陪她来来回回吃过的芙蓉街，不过今天是一个人。没有吃太多，匆忙辗转到当年乾隆老儿出来鬼混遇到夏雨荷的地方——大明湖，4月济南的中午已然可以脱掉外套，穿着短袖瞎逛。想想也是挺省钱的，不用买春天的衣服。哈哈哈。本人路痴一枚，回到泉城广场不迷路的办法当然是….原路返回！为什么还要去泉城广场？因为我还要坐123路回家。 也正是因为这个原因，让我的下午更加精彩也更加有意义。听我慢慢道来。 因为在芙蓉街并没有吃多少东西，所以肚子咕咕作响，正好在即将过马路去泉城广场的路口有一家永和豆浆，我对永和有很深很深的感情，我小的时候第一次去的快餐店不是肯德基，不是麦当劳，就是永和，我还记得当时一个很粗很粗的大油条被切成很多份，可是现在是下午，看了眼菜单，点了一份中西搭配合理的下午茶——红豆粥+炸鸡排。边等边耍着懂球帝消磨时光。斜眼看了一眼旁边的一个大叔，我以为是个流浪汉，没有多想，继续刷，当我的鸡排和红豆粥吃了一半的时候，我发现他竟然一个人在喝小瓶二锅头，没有配菜，一切都没有。我不知道哪里来的勇气，我端起我的饭走到他的对面，”一起吃吧”。他很快就拿起了一块，我知道他可能真的饿了。突然，他放下了鸡排，找他为数不多的几根烟，拿了一根递到我面前，我像往常一样挥挥手示意我不吸烟。他略显失望，不过又继续看着电视，嘴里哼着电视里播放的音乐:时光时光慢些吧，不要再让你变老了。偶尔会抹一下眼角，我不太敢确定是因为我的举动还是歌曲，还是别的什么。当然我不会过问太多，毕竟每个人都有自己不想和别人说的东西，更何况是一个男人。虽然他穿着拖鞋，有点邋遢，但是我很尊重他，永和也没有驱赶这样一个不速之客。很快我喝完了我的粥，他告诉我他是一个木工，最近没有工作，几乎每天都来。每天都喝酒不吃东西？恩。心里有种说不出来的感觉。匆匆道别后，我离开了永和，但心里还是装着这个男人。 在泉城广场的坐标下我看见几个大爷要么挥舞长鞭，啪啪作响，要么婀娜多姿，玩着一个我叫不上名字的东西。不过好生有趣。径直向前，我看到了这一天中最有感触的人。 他看到我在看他，明媚的笑容让人舒服，小伙子来玩吧。这句话让我本能的想起是否是做生意的，然而并不是。老人家只是想把自己会的东西教给更多人，他的活力和心态不夸张的说比很多20，甚至10几岁的年轻人都要好。我汗颜的是我把23岁过成了70岁的样子，而他把心态调整到了最年轻的状态。也正像我在读的书里写的一样，我把所有鸡毛蒜皮的小事当成天塌下来，总有你疲惫的时候。 开开心心的玩了一个小时，教给我很多动作，时不时的夸赞，一切让你觉得舒服，自然，仿佛他是你的亲人，没有任何距离感，我想起那句真正的成熟应该就是对整个世界温柔吧。这个大爷真的做到了。至少在我看来是这样。 双脚打着哆嗦继续往前走，我听到踢毽子的声音，自从离开上家公司，我就再也没有和别人好好踢一次毽子，自然想掺和一下，两个60岁以上的大妈在对着踢，我知道这样的局面肯定希望多一个人，我就笑嘻嘻的对她们毛遂自荐，当然不出我所料，她们也希望多一个人让局面更多变。自信点说，我对我踢毽子的水平还是有底的，很快她们对我处理毽子的脚法交口称赞，但是那时候我心已经在想别的了，我母亲也和她们年纪相仿，不用说抬腿过腰，就是稍微快速移动，可能她老人家都吃不消，真的替她们的子女感到欣慰，那是一种看不到的财富，老人每天开开心心，身体健健康康，这是一个家庭最大的福报。酣战三十分钟左右，我这小身体彻底吃不消了。好久没运动的后果就是你稍微活动量一大，天昏地暗。我该走了，阿姨们，很高心今天能和你们一起踢毽子！匆匆辞别，我也该回家了，我也该重新收拾心情，调整身体继续战斗。 年轻人有年轻人的工作，但是我千不该万不该把年轻人的生活给过成了70岁，这是我今天一天都在反思的一个问题。谢谢你们，叔叔阿姨。祝您身体健康，万寿无疆！","tags":[{"name":"生活","slug":"生活","permalink":"http://yoursite.com/tags/生活/"}]},{"title":"真正的无刷新显示结果","date":"2017-03-29T08:37:19.000Z","path":"2017/03/29/js-0/","text":"ajax是异步加载数据，但是之前用ajax还差了一步才能让他真正的无刷新。ajax+js显示调取结果。","tags":[{"name":"ajax","slug":"ajax","permalink":"http://yoursite.com/tags/ajax/"},{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"}]},{"title":"react自学（一）","date":"2017-03-27T16:01:34.000Z","path":"2017/03/28/react-0/","text":"","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"react","slug":"react","permalink":"http://yoursite.com/tags/react/"},{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"}]},{"title":"mongodb","date":"2017-03-27T09:55:48.000Z","path":"2017/03/27/mongodb/","text":"","tags":[]},{"title":"【闲篇】你的一行代码值多少钱？","date":"2017-03-26T08:40:36.000Z","path":"2017/03/26/thoughts-1/","text":"工作中，我们往往会听到同事或者自己键盘疯狂敲击的声音，在我刚刚进入这个行当前，我听到这个声音后，会把他和大牛联系到一起。直到最近一件小事，让我对编程效率有了一个更深入的看法。 最近做的一个日志管理模块，需要添加批量删除功能，作为一个不太熟悉jquery的我，硬是用了一个点击事件+循环去解决这个小问题，被老大看到，当然不能忍。当他改完代码后我发现冗长的js脚本只剩下干净的一行时，汗颜之情难以言表。 知乎上有一个数据，具体如何得到的，我不清楚。在此引用只是因为对现在的我有一个启发。 数据是这样的，北上广的一个程序员每天的提交代码量平均在30行左右。 可能现在的我每天要写200行代码，但是有200行在别人看是垃圾，而别人只用20行解决，你该如何说你的代码值多少钱？ 真正优秀的程序员写的代码是简单的，简洁的，高效的。 所想程序员的一天假如算8小时，我们应该花费多少时间在coding上呢？当然这个时间就单单计算码字，其实一小时足矣，而且这其中还有你最后的调试时间。那剩下的时间呢，我认为更多的考虑产品的逻辑和易用性，安全性等等，coding只是把你考虑的东西写一个总结，然后提交。如果coding的时间过长，一来你是newbie，二来可能代码过于复杂或者代码量过大。 学着写出高效简洁的代码，既可以取悦自己，也可以减少别人的痛苦。何乐而不为。 -allen gu","tags":[{"name":"感想","slug":"感想","permalink":"http://yoursite.com/tags/感想/"}]},{"title":"浅谈非侵入式javascript","date":"2017-03-24T08:36:01.000Z","path":"2017/03/24/javascript-basic/","text":"何为非侵入式JavaScript？1&lt;div style=\"style=width: 100px\"&gt;&lt;/div&gt; 上面这种格式你是否会熟悉？当然这种格式尽量不要在html中使用，我们今天的主人公——侵入式Javascript,和上面这种形式类似。当然我们依旧不提倡。原因我们之后慢慢揭晓。","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"bootstrap之model填坑","date":"2017-03-23T09:30:33.000Z","path":"2017/03/23/bootstrap-model/","text":"bootstrap是我最早听说的前端框架，以其简单实用，栅格式布局的响应移动端，一度成为搭建后台乃至前台界面的顶梁柱。 之前看过很多次都没有把模态框(model)搞懂，这次来，就是为了填坑。不搞懂，不睡觉。(立FLAG小王子^_^) 对于这个模态框，我想先从最简单的文档开始，然后追溯他的源码。 闲话:现在是凌晨快一点，是惰性最凶猛的时候，和别人差距那么大，骚年，继续吧。 对于bootstrap的基本css不想再在这里絮叨，之后会开一个帖子关于自己带有后台管理的博客系统，那里会着重使用这些强大的框架，完成后台的搭建工作。现在就着眼model，goal:实现model的熟练使用，了解model的核心思想。 版本:bootstrap v3, 参考网址(bootstrap中文网) 模态框的js是model.js，因为是针对此模块的实验，所以只引用此js，但是因为bootstrap的js全部依赖于jquery，所以在引用model.js之前把jquery引进去，否则找不到原因，会很*疼~用前须知： 不支持同时打开多个模态框千万不要在一个模态框上重叠另一个模态框。要想同时支持多个模态框，需要自己写额外的代码来实现。 模态框的HTML代码放置的位置务必将模态框的 HTML 代码放在文档的最高层级内（也就是说，尽量作为 body标签的直接子元素），以避免其他组件影响模态框的展现和/或功能。","tags":[{"name":"bootstrap","slug":"bootstrap","permalink":"http://yoursite.com/tags/bootstrap/"},{"name":"model","slug":"model","permalink":"http://yoursite.com/tags/model/"}]},{"title":"monolog & mongodb的强强联手","date":"2017-03-22T14:55:29.000Z","path":"2017/03/22/monolog-mongodb/","text":"monolog和mongodb的强强联手网站日志管理中将这两把利剑同时使用，效果如何，之后续……因为这个日志管理还没做完，我边搜集资料边完成项目，文章会从“这是什么”，“为什么要用它”，“如何用”这三个方面展开。 首先介绍一下这两位superstar: monolog Monolog是php下比较全又容易扩展的记录日志类库。目前有包括Symfony 、Laravel、 CakePHP等诸多知名php框架都内置了Monolog。Monolog可以把你的日志发送到文件，sockets，收件箱，数据库。Monolog遵循PSR3的接口规范，可以很轻易的替换成其他遵循同一规范的日志类库。Monolog具有良好的扩展性，通过Handler、Formatter和Processor这几个接口，可以对Monolog类库进行各种扩展和自定义。 mongodb MongoDB is not a key/value store, it’s quite a bit more. It’s definitely nota RDBMS either. It seems to be very performant and either has.I think Mongo might be the closest thing to a RDBMS replacement that I’veseen so far.It won’t work for all data setsand access patterns, but it’s built for your typical CRUD stuff. Storing whatis essentially a huge hash, and being able to select on any of those keys, iswhat most people use a relational database for. If your DB is 3NF and youdon’t do any joins (you’re just selecting a bunch of tables and putting allthe objects together, AKA what most people do in a web app), MongoDB wouldprobably kick ass for you. 如何让他们强强联合？最重要的地方来了，既然mongodb和monolog是这么牛，拓展性一定不差，对！ 我们去monolog里看看，有没有能连接到mongodb的接口啥的……五分钟后……1234567891011121314class MongoDBHandler extends AbstractProcessingHandler&#123; protected $mongoCollection; public function __construct($mongo, $database, $collection, $level = Logger::DEBUG, $bubble = true) &#123; if (!($mongo instanceof \\MongoClient || $mongo instanceof \\Mongo || $mongo instanceof \\MongoDB\\Client)) &#123; throw new \\InvalidArgumentException('MongoClient, Mongo or MongoDB\\Client instance required'); &#125; $this-&gt;mongoCollection = $mongo-&gt;selectCollection($database, $collection); parent::__construct($level, $bubble); &#125;","tags":[{"name":"monolog","slug":"monolog","permalink":"http://yoursite.com/tags/monolog/"},{"name":"mongodb","slug":"mongodb","permalink":"http://yoursite.com/tags/mongodb/"}]}]