[{"title":"编码","date":"2017-04-12T06:09:19.000Z","path":"2017/04/12/ascii/","text":"习惯用维基百科查询词条，你会有收获的。 ascii码维基解释unicode码维基解释utf-8编码维基解释 缺点:ASCII的局限在于只能显示26个基本拉丁字母、阿拉伯数目字和英式标点符号，因此只能用于显示现代美国英语（而且在处理英语当中的外来词如naïve、café、élite等等时，所有重音符号都不得不去掉，即使这样做会违反拼写规则）。而EASCII虽然解决了部分西欧语言的显示问题，但对更多其他语言依然无能为力。因此现在的软件系统大多采用Unicode。","tags":[{"name":"编码","slug":"编码","permalink":"http://yoursite.com/tags/编码/"}]},{"title":"base64","date":"2017-04-12T05:24:26.000Z","path":"2017/04/12/php-7/","text":"Base64编码说明 Base64编码要求把3个8位字节（38=24）转化为4个6位的字节（46=24），之后在6位的前面补两个0，形成8位一个字节的形式。 如果剩下的字符不足3个字节，则用0填充，输出字符使用’=’，因此编码后输出的文本末尾可能会出现1或2个’=’。 为了保证所输出的编码位可读字符，Base64制定了一个编码表，以便进行统一转换。编码表的大小为2^6=64，这也是Base64名称的由来。 base64存储图片的利弊：优点:base64存储的好处是本地存储，即便在无网状态下也能显示图片。减少 HTTP 请求，适合小尺寸的图片。缺点:若大尺寸的图片使用 base 64 的话，会导致数据太大，加载过慢。 确实对使用场景不太清楚，先贴下来。base64使用场景","tags":[{"name":"加密","slug":"加密","permalink":"http://yoursite.com/tags/加密/"},{"name":"数据存储","slug":"数据存储","permalink":"http://yoursite.com/tags/数据存储/"}]},{"title":"redis存储","date":"2017-04-12T03:28:14.000Z","path":"2017/04/12/redis-0/","text":"早先用laravel框架把session存储到了redis里，为了获取线上的存取高效。那么今天就专门开一篇介绍redis。 redis 官网 Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性（英语：Durability_(database_systems)）的键值对存储数据库（英语：Key-value database）。从2015年6月开始，Redis的开发由Redis Labs（英语：Redis Labs）赞助，而2013年5月至2015年6月期间，其开发由Pivotal赞助。在2013年5月之前，其开发由VMware赞助。根据月度排行网站DB-Engines.com的数据显示，Redis是最流行的键值对存储数据库。以上是维基百科对redis的描述。","tags":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/tags/redis/"}]},{"title":"redis的基本命令","date":"2017-04-12T03:28:10.000Z","path":"2017/04/12/redis-1/","text":"最基础的安装就不赘述了，开启server，然后打开客户端，输入ping得到pong后，证明我们的redis已经打通。 参考文档 我们就可以通过其他语言像调用mysql一样存储数据到redis，而且他远比mysql要简单的多，因为只是一个键值对，没有任何关联关系。","tags":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/tags/redis/"}]},{"title":"富文本编辑器——CMS不可或缺的插件","date":"2017-04-11T08:11:31.000Z","path":"2017/04/11/php-6/","text":"","tags":[{"name":"插件","slug":"插件","permalink":"http://yoursite.com/tags/插件/"}]},{"title":"laravel不可不知的神器","date":"2017-04-11T07:45:22.000Z","path":"2017/04/11/laravel-6/","text":"laravel 神器","tags":[{"name":"laravel神器","slug":"laravel神器","permalink":"http://yoursite.com/tags/laravel神器/"}]},{"title":"laravel的御用时间库——carbon","date":"2017-04-11T07:33:45.000Z","path":"2017/04/11/laravel-5/","text":"laravel里御用了一款时间库，这个和laravel一样，是对php原生时间类date的封装，能得到laravel的认可，也说明了这个库确实还很优秀。 我们还是老样子，先把他的github和官网贴出来。官方,一定是官方。carbon 官方文档carbon githubphp只认这些标准时区因为是御用类库,所以不用再在composer中说明,然后app.php配置一下。然后就看文档吧,骚年。","tags":[{"name":"laravel神器","slug":"laravel神器","permalink":"http://yoursite.com/tags/laravel神器/"}]},{"title":"验证码，让你的网站多一层遮羞布","date":"2017-04-11T07:14:14.000Z","path":"2017/04/11/laravel-4/","text":"验证码的存在是很多网站为了避免被AI欺负所建立，就像12306那个人都看不清的验证码就是这样的存在目的。反正每次春运抢票我都是十分的紧张，然而验证码的破解好似并不像我们外行人想象的那么难。但是现在我们的重点还是返回到技术的层面。","tags":[{"name":"laravel神器","slug":"laravel神器","permalink":"http://yoursite.com/tags/laravel神器/"}]},{"title":"excel文件导入到数据库","date":"2017-04-11T06:52:36.000Z","path":"2017/04/11/laravel-3/","text":"laravel的插件琳琅满目，其中不乏很多锋利神器。你还在为你有大量客户数据导入困难而发愁吗？excel导入数据库，真的值得拥有。【起因】我可没有神马客户数据在手上，只是想做一个php常用函数的备忘功能，在网站后台的左上角可以随机滚动播出，一开始想用数组，但是我发现重现合成数组略显笨拙，不如直接存在数据库里。 【开动】composer.json:”maatwebsite/excel”: “~1.3”。composer install，然后去app.php里配置好，这里就不啰嗦了。首先我们找到他的官网，顺便说一下自己对找资料的一些感悟，入行之前在知乎里经常看到对新人的忠告中会有这样的字眼：学会FANQIANG，学会GOOGLE,最好的指导教程是官方文档(前提:你的英语要ok),到现在为止,这些忠告被我一一证实是对的(所以逛知乎的时候警惕性不要太高,大牛一般不骗小朋友)。回到这个案例中:maatwebsite/excel githubmaatwebsite/excel 官方文档 然后我们准备一张excel表格，类似这个样纸。很简单，对吧。好，我们继续，打开这个插件的官网","tags":[{"name":"excel","slug":"excel","permalink":"http://yoursite.com/tags/excel/"},{"name":"laravel神器","slug":"laravel神器","permalink":"http://yoursite.com/tags/laravel神器/"}]},{"title":"laravel是如何持久化用户登录的?","date":"2017-04-11T03:21:40.000Z","path":"2017/04/11/laravel-2/","text":"首先何为持久化登陆，简单举个栗子，最常见的就是 ‘记住我’ 功能。为了用户信息安全，session的存储时间往往不是那么长，发呆时间一般在几个小时到十几个小时为宜，假如这个用户超过session的存储时间不去动鼠标，那么session会自动销毁，那么就需要重新登陆了。对于安全确实做到了，但是有时会略显麻烦，试想一个只有你用的系统，每天都输入辣么熟悉的用户名密码是否让你厌烦？所以记住我的功能就是延长session的存储时间，让session销毁的权利放到你手里。参考资料 那laravel是如何做到这个功能的？ 这个功能在laravel中是很简单的一个功能。确保前台页面有一个记住我的checkbox， 之后补一个原生的记住我功能。参考资料：如何更安全的实现记住我的功能","tags":[{"name":"session","slug":"session","permalink":"http://yoursite.com/tags/session/"},{"name":"laravel","slug":"laravel","permalink":"http://yoursite.com/tags/laravel/"}]},{"title":"从小工到专家读书笔记(零)","date":"2017-04-11T03:07:55.000Z","path":"2017/04/11/book-0/","text":"这是我读的第一本程序员必读书籍，开篇我就被他言简意赅的表达方式所吸引，总会在一个小故事或论述后加上画龙点睛的结论，在他的书中，自己在很多方面都不是一个合格的程序员，至少现在还不是。 这本书抛开一些技术术语，我觉得其他行业的人读也会开卷有益的，例如，对待软件一定要有责任感，既然是自己的工作，就要在出现bug时不要推卸自己的责任，找一些蹩脚的借口或理由。这个时候更多的方案和合理的尝试会比这些更有效果，之前出现问题总会在尝试几次后就放弃，然后把希望寄托在周围人身上，其实这些都是锻炼自己独立解决问题的好机会，一定不能放过，这条路我应该算刚入行，一定要养成好的习惯，否则越到后面这些恶习就越难改。 其次，知识是有时效性的，2000年初的时候，如果你只会html+css你就是很厉害的互联网高手了，但是现在呢，如果你去应聘的时候说我只会这两样，除非你把适配做到极致，css的特性了如指掌，否则我想任何公司都不会喜欢这样单一技能的应聘者。(重构的前端可能也对后台脚本有不错的理解。)其实时间就是金钱，这句话在这里有另一种解读，你现在会用php搭建网站，一个月给你4000元，两年后，加入php没落了，你还有这份工作都不好说了，你还指望工资吗？尽快学会手头的工具，大胆尝试新的语言，这些都是一个合格程序员应该有的意识，因为时间不等人，未来对人才的需求大多数人看不清，看不清不要紧，只要你有一颗’善变’的心就好。 最后一点是交流，现在的我其实很怕交流，因为自己很多地方不清楚，心里发虚，但是越是这样，越要鼓起勇气去发问，及时当时不懂，但是听到一些关键词，事后自己反思的时候或许就能茅塞顿开了，不要怕，说出你的疑惑是一件很棒的事情，因为证明你思考过，尝试过。最可怕的是你无法清晰的把你的问题表述出来，这就很麻烦了。 这是略读了第一章后的一点感悟，这本书很好，现在的我可能还不能完全消化里面的一些思想，反复反复再反复吧。 Provide Options,Don’t Make Lame Excuses.","tags":[{"name":"编程习惯","slug":"编程习惯","permalink":"http://yoursite.com/tags/编程习惯/"},{"name":"读书笔记","slug":"读书笔记","permalink":"http://yoursite.com/tags/读书笔记/"}]},{"title":"做一件事的时候，一定要思考有什么连锁反应","date":"2017-04-11T02:39:20.000Z","path":"2017/04/11/thoughts-4/","text":"Think. 思考，思考，思考。 删除它，会有什么关联后果？ 删除他，会不会成功？ 当然我们不会一开始就想的面面俱到，但是一定要想，这样后面会降低修改bug的几率。","tags":[{"name":"编程习惯","slug":"编程习惯","permalink":"http://yoursite.com/tags/编程习惯/"},{"name":"思维习惯","slug":"思维习惯","permalink":"http://yoursite.com/tags/思维习惯/"}]},{"title":"巧用session存储全局变量","date":"2017-04-10T09:08:52.000Z","path":"2017/04/10/laravel-1/","text":"session是一个存储在服务器端的一个小型数据表，他可以将客户本次会话的内容存储起来，根据uid来分辨这个会话属于哪个用户。根据这个属性，我们可以把本次会话中随时拿来就用的东西放到session中存储。例如今天我把上一次登陆的时间放到了session中，在本次会话中，只要有网络，你就可以通过拿到这个时间。具体的实现方法是，数据库用户表里有一个字段叫做last_login,你登陆成功时，把这个字段的值取出，存到session中，然后更新这个字段。 laravel默认是将session存储到了file中，假如说，上次登录时间在每个页面都有，那文件的存取是否是高效快捷的？ 我们当然还要更优解，作为存取频繁的数据，redis这个内存数据库的效率自然不用说，肯定要比数据库或者文件存取要快的多的多。今天做的就是用redis来存取session，这样线上的效率肯定大大提升。 具体操作简单至极，因为laravel都给你做了完美的封装，只要你配置就可以。1.在laravel4中，把session的驱动(driver)改成redis123456789101112131415/* |-------------------------------------------------------------------------- | Default Session Driver |-------------------------------------------------------------------------- | | This option controls the default session \"driver\" that will be used on | requests. By default, we will use the lightweight native driver but | you may specify any of the other wonderful drivers provided here. | | Supported: \"file\", \"cookie\", \"database\", \"apc\", | \"memcached\", \"redis\", \"array\" | */ 'driver' =&gt; 'redis', 2去config\\database.php文件里改一下redis的配置，【默认情况下，Redis 服务会提供 16 个数据库，Laravel 使用数据库 0 （请见 Redis 文档）作为缓存和 Session 的存储。】所以说，不要把这两个放在一个redis库里，玩意哪天你突然要把缓存全删除，那么就会出现所有用户都要重新的登陆的壮观的景象，所以，一定分开存。12345678910111213141516'redis' =&gt; array( 'cluster' =&gt; false, 'default' =&gt; array( 'host' =&gt; '127.0.0.1', 'port' =&gt; 6379, 'database' =&gt; 0, ), 'session' =&gt; array( 'host' =&gt; '127.0.0.1', 'port' =&gt; 6379, 'database' =&gt; 1, ),) 3.把session的连接改成你设置的专门为session准备的redis库。123456789101112/* |-------------------------------------------------------------------------- | Session Database Connection |-------------------------------------------------------------------------- | | When using the \"database\" or \"redis\" session drivers, you may specify a | connection that should be used to manage these sessions. This should | correspond to a connection in your database configuration options. | */ 'connection' =&gt; 'session', 4.大功告成。这时候你就把session从文件存储转移到了redis。你说怎么确定成功了？方法很多，可以删除所有的session文件，看能否取到你想要的session键值，除此之外就是直接去redis的1号库里喊一嗓子，’那个，刚才有没有一个叫laravel的家伙进来？’，然后看到了这个 Try something new!","tags":[{"name":"session","slug":"session","permalink":"http://yoursite.com/tags/session/"},{"name":"laravel","slug":"laravel","permalink":"http://yoursite.com/tags/laravel/"}]},{"title":"__get和白名单数组搭配使用","date":"2017-04-10T05:25:57.000Z","path":"2017/04/10/php-5/","text":"我们知道__get()方法可以把不可见的属性获得，但是这样真的好吗？属性的权限本来就是为了避免出现越权行为，所以，这里有个小技巧，搭配使用白名单数组。 12345678910111213$white_list = ['name'];private $name = 'allen is a php coder!';public function __get($attr)&#123; if(in_array($attr, $this-&gt;$white_list)) &#123; return $this-&gt;$name; &#125;else &#123; return '你的查找属于FBI绝密档案!!!' &#125;&#125; 通过这个小案例，我们就能知道__get()这个方法的使用有些利弊，一定要考虑清楚之后再使用。","tags":[{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"}]},{"title":"laravel巧用php原生的技巧(零)","date":"2017-04-10T03:39:58.000Z","path":"2017/04/10/laravel-0/","text":"php有很多很有用的原生方法，在经过laravel框架的封装后可以实现很多干净的效果。今天先说一个，Model为什么可以使用静态where方法？ 我想这个问题如果摆在一个经常使用laravel但又不查源码的童鞋面前，可能会出现欲辨已忘言的情况。 下面我就把这个问题慢慢的解释开，对于像我这样的newbee来说，确实值得好好咂摸一下。 这里会用到的一些基础方法包括，两个魔术方法 __call&amp;__callStatic。另外会用到call_user_func_array()【调用回调函数，并把一个数组参数作为回调函数的参数】方法，这个方法我个人不大常用(因为之前真的不会用+.+)，但是在laravel中，这三个方法可以让代码干净整洁。 1234567891011121314151617181920212223242526272829303132/** * Handle dynamic method calls into the method. * * @param string $method * @param array $parameters * @return mixed */public function __call($method, $parameters)&#123; if (in_array($method, array('increment', 'decrement'))) &#123; return call_user_func_array(array($this, $method), $parameters); &#125; $query = $this-&gt;newQuery(); return call_user_func_array(array($query, $method), $parameters);&#125;/** * Handle dynamic static method calls into the method. * * @param string $method * @param array $parameters * @return mixed */public static function __callStatic($method, $parameters)&#123; $instance = new static; return call_user_func_array(array($instance, $method), $parameters);&#125; 我们现在Model类里ctrl+f里查了一下，是否有where方法，结果为空， 这就是laravel的巧妙之处。当你兴高采烈的用一个定义好的model去调用一个数据表时，你用where，但是model类里可是没有这个方法，laravel的public static function callStatic会自动生成一个新的Model实例,然后将调用这个实例的where方法，怎么样？也木有啊！那就继续看，哇，这不是还有一个call方法吗，我们不是没有where方法吗，又去执行__call方法，我们发现in_array($method, array(‘increment’, ‘decrement’))并不适合我们，因为我们的方法是where童鞋。继续下去就是创建一个新的query，然后把问题巧妙的转变成了利用query的where方法。 Model的newQuery()方法1234567891011/** * Get a new query builder for the model's table. * * @return \\Illuminate\\Database\\Eloquent\\Builder */ public function newQuery() &#123; $builder = $this-&gt;newQueryWithoutScopes(); return $this-&gt;applyGlobalScopes($builder); &#125; 12345678910111213141516/** * Get a new query builder that doesn't have any global scopes. * * @return \\Illuminate\\Database\\Eloquent\\Builder|static */ public function newQueryWithoutScopes() &#123; $builder = $this-&gt;newEloquentBuilder( $this-&gt;newBaseQueryBuilder() ); // Once we have the query builders, we will set the model instances so the // builder can easily access any information it may need from the model // while it is constructing and executing various queries against it. return $builder-&gt;setModel($this)-&gt;with($this-&gt;with); &#125; 1234public function newEloquentBuilder($query) &#123; return new Builder($query); &#125; 12345678910111213141516/** * Apply all of the global scopes to an Eloquent builder. * * @param \\Illuminate\\Database\\Eloquent\\Builder $builder * @return \\Illuminate\\Database\\Eloquent\\Builder */ public function applyGlobalScopes($builder) &#123; foreach ($this-&gt;getGlobalScopes() as $scope) &#123; $scope-&gt;apply($builder, $this); &#125; return $builder; &#125;","tags":[{"name":"laravel","slug":"laravel","permalink":"http://yoursite.com/tags/laravel/"},{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"},{"name":"技巧","slug":"技巧","permalink":"http://yoursite.com/tags/技巧/"}]},{"title":"","date":"2017-04-09T15:09:46.000Z","path":"2017/04/09/thoughts-3/","text":"","tags":[]},{"title":"灵活使用魔术方法，让程序更加灵活","date":"2017-04-09T14:21:34.000Z","path":"2017/04/09/php-4/","text":"魔术方法是一组php预定义的函数集合。比较常用的有:构造方法:construct()调用方法:call()调用静态方法:callStatic()当然除此之外还有很多，包括给不可见或不存在的属性赋值的set(), 读取不可访问的属性时__get()会被调用","tags":[{"name":"php基础","slug":"php基础","permalink":"http://yoursite.com/tags/php基础/"}]},{"title":"拥抱use strict","date":"2017-04-08T10:47:24.000Z","path":"2017/04/08/js-1/","text":"之前写过一篇不要在html文件里直接写js。这篇没有干货(怎么老没有干货，自省三秒钟)。这篇依旧是规范，对于javascript这门语言，use strict有什么意义？ 除了正常运行模式，ECMAscript 5添加了第二种运行模式：”严格模式”（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。 那么没事对自己个这么狠干嘛？ 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为; 消除代码运行的一些不安全之处，保证代码运行的安全； 提高编译器效率，增加运行速度；(也好理解，没有异议的语言当然运行嗖嗖的,编译器不用猜测甚至走报错流程。) 为未来新版本的Javascript做好铺垫。 “严格模式”体现了Javascript更合理、更安全、更严谨的发展方向，包括IE 10在内的主流浏览器，都已经支持它，许多大项目已经开始全面拥抱它。 另一方面，同样的代码，在”严格模式”中，可能会有不一样的运行结果；一些在”正常模式”下可以运行的语句，在”严格模式”下将不能运行。掌握这些内容，有助于更细致深入地理解Javascript，让你变成一个更好的程序员。 进入标志: “use strict”; 语法与行为改变: 严格模式对Javascript的语法和行为，都做了一些改变。 在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。1234\"use strict\"; v = 1; // 报错，v未声明 for(i = 0; i &lt; 2; i++) &#123; // 报错，i未声明 &#125; 对于没有js干货这个问题，我已经和自己协商好，每天都写一点，哪怕只有一点。","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"规范","slug":"规范","permalink":"http://yoursite.com/tags/规范/"}]},{"title":"浅析静态变量【转】","date":"2017-04-08T10:03:26.000Z","path":"2017/04/08/php-3/","text":"通常意义上静态变量是静态分配的，他们的生命周期和程序的生命周期一样， 只有在程序退出时才结束期生命周期，这和局部变量相反，有的语言中全局变量也是静态分配的。 例如PHP和Javascript中的全局变量。 静态变量可以分为： 静态全局变量，PHP中的全局变量也可以理解为静态全局变量，因为除非明确unset释放，在程序运行过程中始终存在。 静态局部变量，也就是在函数内定义的静态变量，函数在执行时对变量的操作会保持到下一次函数被调用。 静态成员变量，这是在类中定义的静态变量，和实例变量相对应，静态成员变量可以在所有实例中共享。 最常见的是静态局部变量及静态成员变量。局部变量只有在函数执行时才会存在。 通常，当一个函数执行完毕，它的局部变量的值就已经不存在，而且变量所占据的内存也被释放。 当下一次执行该过程时，它的所有局部变量将重新初始化。如果某个局部变量定义为静态的， 则它的值不会在函数调用结束后释放，而是继续保留变量的值。 12345678910111213public function t() &#123; static $i = 0; $i++; echo $i, ' ';&#125;public function getMy()&#123; $this-&gt;t(); $this-&gt;t(); $this-&gt;t(); $this-&gt;t();&#125; 没错，结果就是1,2,3,4。 不要被t函数开头的初始化所迷惑，这个对局部静态变量没有鸟用，你可以这样理解，函数内的静态变量是对这个函数而言的全局变量，不会释放。 而静态成员变量在上一篇面包屑里有案例，这是一个保存变量的好办法，因为普通的局部变量在函数结束后就会go die！能在函数结束之后还站在那里就是 静态变量。 早早脱离菜鸟阵营。come on!","tags":[{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"},{"name":"静态变量","slug":"静态变量","permalink":"http://yoursite.com/tags/静态变量/"}]},{"title":"后台面包屑导航类的分析","date":"2017-04-08T09:41:03.000Z","path":"2017/04/08/php-2/","text":"今天又去扒赵哥的里昂官网的源码，每次膝盖都是血肉模糊……应该以后会好一点^_^ 首先这个封装好的类让我这个最初接触php的我觉得很难，现在想想，真的没啥难的，如果说难，那就是php基础之前真的太差，对很多概念的理解不透彻，好了，切入正文。 这个类的源码先贴出来。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;?php class BreadCrumb&#123; public $title; public $url; protected static $items; public function __construct($title, $url=null) &#123; $this-&gt;title = $title; $this-&gt;url = $url; &#125; public static function push($title, $url=null) &#123; return static::items()-&gt;push(new Breadcrumb($title, $url)); &#125; public function isLast() &#123; $last = static::items()-&gt;last(); return $last-&gt;url == $this-&gt;url; &#125; /** * Handle dynamic method calls into the method. * * @param string $method * @param array $parameters * @return mixed */ public function __call($method, $parameters) &#123; return call_user_func_array(array(static::items(), $method), $parameters); &#125; public static function items() &#123; if (null == static::$items) &#123; static::$items = new Collection(); &#125; return static::$items; &#125; /** * Handle dynamic static method calls into the method. * * @param string $method * @param array $parameters * @return mixed */ public static function __callStatic($method, $parameters) &#123; return call_user_func_array(array(static::items(), $method), $parameters); &#125; &#125; 寥寥数行代码要分析的主要是，额，思想。对，就是封装，继承的思想。这个在我一开学php的时候觉得没什么东西啊，现在想想，图样图森破！一个菜鸟和高手的差别就在这里，Don‘t Repeat Yourself——赵哥箴言。当然这是一个优秀的程序员的基本功。对于后台来说，面包屑是再常用不过的东西，不封装好，会给你之后带来更多麻烦，而继承呢，一定要把根节点在基类里定义好，这样才能做到面包屑的根节点-&gt;子节点的效果。其次，对于类变量的使用也是一个亮点。好了，我把基类的代码也贴出来。123456789public function __construct() &#123; View::addLocation(app_path() . '/themes/admin'); parent::__construct(); BreadCrumb::push('管理中心', action('Admin\\DashboardController@getIndex')); &#125; 最为重要的初始化代码，把根节点push到一个空的collection中，然后继承了基类的子类可以继续通过push将要添加的子节点送入collection中，这也是实现面包屑的核心思想。至于代码，我承认现在的我可能想不到这样写，但是我一定要努力向这样coding。 DONT REPEAT YOURSELF!","tags":[{"name":"laravel","slug":"laravel","permalink":"http://yoursite.com/tags/laravel/"},{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"},{"name":"静态变量","slug":"静态变量","permalink":"http://yoursite.com/tags/静态变量/"}]},{"title":"后期静态绑定","date":"2017-04-08T08:26:38.000Z","path":"2017/04/08/php-1/","text":"后期静态绑定","tags":[{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"}]},{"title":"命名空间的再理解","date":"2017-04-08T07:45:40.000Z","path":"2017/04/08/php-0/","text":"命名空间是类的文件夹，可以防止你的类名与框架作者或者团队其他人员冲突，那么，如果在不定义这个命名空间会发生什么？答案是没什么问题，如果你不定义就默认放到全局，那么除非你要用’全局’这个类文件夹以外的类文件需要定义，否则就不用再use了，因为聪明的php已经默认是从当前文件夹里取出你要的类。那么在非全局命名空间怎么去调用全局空间的类呢，很简单，linux根目录是/,在php中类似，不过是\\。就是这么简单。 很简单，不要瞎想。多联想，举一反三。","tags":[{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"},{"name":"命名空间","slug":"命名空间","permalink":"http://yoursite.com/tags/命名空间/"}]},{"title":"忙里偷闲","date":"2017-04-06T13:06:21.000Z","path":"2017/04/06/thoughts-2/","text":"上一次正了八经放假得追溯到半个多月前吧，最近每天睁开眼都觉得做完好像和别人打了一架，很累，完全没有一觉醒来满血复活的感觉。迫于各种原因和赵哥请了一天假，真的想出去走走，看看。 上午收拾了一上午的屋子，洗洗衣服，毕竟也很乱了，每次收拾好总觉得可以保持，可惜从没有。以后不要给自己太多压力，很多事情可能真的是从小就养成的习惯，很难改正，就像那个被赵哥扣去的大写切换键一样。下午就比较精彩了，做123路到泉城广场，把路上积累的液体排泄到恒隆高大上的洗手间，顿时整个人都舒坦了，一路向北，路过陪她来来回回吃过的芙蓉街，不过今天是一个人。没有吃太多，匆忙辗转到当年乾隆老儿出来鬼混遇到夏雨荷的地方——大明湖，4月济南的中午已然可以脱掉外套，穿着短袖瞎逛。想想也是挺省钱的，不用买春天的衣服。哈哈哈。本人路痴一枚，回到泉城广场不迷路的办法当然是….原路返回！为什么还要去泉城广场？因为我还要坐123路回家。 也正是因为这个原因，让我的下午更加精彩也更加有意义。听我慢慢道来。 因为在芙蓉街并没有吃多少东西，所以肚子咕咕作响，正好在即将过马路去泉城广场的路口有一家永和豆浆，我对永和有很深很深的感情，我小的时候第一次去的快餐店不是肯德基，不是麦当劳，就是永和，我还记得当时一个很粗很粗的大油条被切成很多份，可是现在是下午，看了眼菜单，点了一份中西搭配合理的下午茶——红豆粥+炸鸡排。边等边耍着懂球帝消磨时光。斜眼看了一眼旁边的一个大叔，我以为是个流浪汉，没有多想，继续刷，当我的鸡排和红豆粥吃了一半的时候，我发现他竟然一个人在喝小瓶二锅头，没有配菜，一切都没有。我不知道哪里来的勇气，我端起我的饭走到他的对面，”一起吃吧”。他很快就拿起了一块，我知道他可能真的饿了。突然，他放下了鸡排，找他为数不多的几根烟，拿了一根递到我面前，我像往常一样挥挥手示意我不吸烟。他略显失望，不过又继续看着电视，嘴里哼着电视里播放的音乐:时光时光慢些吧，不要再让你变老了。偶尔会抹一下眼角，我不太敢确定是因为我的举动还是歌曲，还是别的什么。当然我不会过问太多，毕竟每个人都有自己不想和别人说的东西，更何况是一个男人。虽然他穿着拖鞋，有点邋遢，但是我很尊重他，永和也没有驱赶这样一个不速之客。很快我喝完了我的粥，他告诉我他是一个木工，最近没有工作，几乎每天都来。每天都喝酒不吃东西？恩。心里有种说不出来的感觉。匆匆道别后，我离开了永和，但心里还是装着这个男人。 在泉城广场的坐标下我看见几个大爷要么挥舞长鞭，啪啪作响，要么婀娜多姿，玩着一个我叫不上名字的东西。不过好生有趣。径直向前，我看到了这一天中最有感触的人。 他看到我在看他，明媚的笑容让人舒服，小伙子来玩吧。这句话让我本能的想起是否是做生意的，然而并不是。老人家只是想把自己会的东西教给更多人，他的活力和心态不夸张的说比很多20，甚至10几岁的年轻人都要好。我汗颜的是我把23岁过成了70岁的样子，而他把心态调整到了最年轻的状态。也正像我在读的书里写的一样，我把所有鸡毛蒜皮的小事当成天塌下来，总有你疲惫的时候。 开开心心的玩了一个小时，教给我很多动作，时不时的夸赞，一切让你觉得舒服，自然，仿佛他是你的亲人，没有任何距离感，我想起那句真正的成熟应该就是对整个世界温柔吧。这个大爷真的做到了。至少在我看来是这样。 双脚打着哆嗦继续往前走，我听到踢毽子的声音，自从离开上家公司，我就再也没有和别人好好踢一次毽子，自然想掺和一下，两个60岁以上的大妈在对着踢，我知道这样的局面肯定希望多一个人，我就笑嘻嘻的对她们毛遂自荐，当然不出我所料，她们也希望多一个人让局面更多变。自信点说，我对我踢毽子的水平还是有底的，很快她们对我处理毽子的脚法交口称赞，但是那时候我心已经在想别的了，我母亲也和她们年纪相仿，不用说抬腿过腰，就是稍微快速移动，可能她老人家都吃不消，真的替她们的子女感到欣慰，那是一种看不到的财富，老人每天开开心心，身体健健康康，这是一个家庭最大的福报。酣战三十分钟左右，我这小身体彻底吃不消了。好久没运动的后果就是你稍微活动量一大，天昏地暗。我该走了，阿姨们，很高心今天能和你们一起踢毽子！匆匆辞别，我也该回家了，我也该重新收拾心情，调整身体继续战斗。 年轻人有年轻人的工作，但是我千不该万不该把年轻人的生活给过成了70岁，这是我今天一天都在反思的一个问题。谢谢你们，叔叔阿姨。祝您身体健康，万寿无疆！","tags":[{"name":"生活","slug":"生活","permalink":"http://yoursite.com/tags/生活/"}]},{"title":"真正的无刷新显示结果","date":"2017-03-29T08:37:19.000Z","path":"2017/03/29/js-0/","text":"ajax是异步加载数据，但是之前用ajax还差了一步才能让他真正的无刷新。ajax+js显示调取结果。","tags":[{"name":"ajax","slug":"ajax","permalink":"http://yoursite.com/tags/ajax/"},{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"}]},{"title":"react自学（一）","date":"2017-03-27T16:01:34.000Z","path":"2017/03/28/react-0/","text":"","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"react","slug":"react","permalink":"http://yoursite.com/tags/react/"},{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"}]},{"title":"mongodb","date":"2017-03-27T09:55:48.000Z","path":"2017/03/27/mongodb/","text":"","tags":[]},{"title":"【闲篇】你的一行代码值多少钱？","date":"2017-03-26T08:40:36.000Z","path":"2017/03/26/thoughts-1/","text":"工作中，我们往往会听到同事或者自己键盘疯狂敲击的声音，在我刚刚进入这个行当前，我听到这个声音后，会把他和大牛联系到一起。直到最近一件小事，让我对编程效率有了一个更深入的看法。 最近做的一个日志管理模块，需要添加批量删除功能，作为一个不太熟悉jquery的我，硬是用了一个点击事件+循环去解决这个小问题，被老大看到，当然不能忍。当他改完代码后我发现冗长的js脚本只剩下干净的一行时，汗颜之情难以言表。 知乎上有一个数据，具体如何得到的，我不清楚。在此引用只是因为对现在的我有一个启发。 数据是这样的，北上广的一个程序员每天的提交代码量平均在30行左右。 可能现在的我每天要写200行代码，但是有200行在别人看是垃圾，而别人只用20行解决，你该如何说你的代码值多少钱？ 真正优秀的程序员写的代码是简单的，简洁的，高效的。 所想程序员的一天假如算8小时，我们应该花费多少时间在coding上呢？当然这个时间就单单计算码字，其实一小时足矣，而且这其中还有你最后的调试时间。那剩下的时间呢，我认为更多的考虑产品的逻辑和易用性，安全性等等，coding只是把你考虑的东西写一个总结，然后提交。如果coding的时间过长，一来你是newbie，二来可能代码过于复杂或者代码量过大。 学着写出高效简洁的代码，既可以取悦自己，也可以减少别人的痛苦。何乐而不为。 -allen gu","tags":[{"name":"感想","slug":"感想","permalink":"http://yoursite.com/tags/感想/"}]},{"title":"浅谈非侵入式javascript","date":"2017-03-24T08:36:01.000Z","path":"2017/03/24/javascript-basic/","text":"何为非侵入式JavaScript？1&lt;div style=\"style=width: 100px\"&gt;&lt;/div&gt; 上面这种格式你是否会熟悉？当然这种格式尽量不要在html中使用，我们今天的主人公——侵入式Javascript,和上面这种形式类似。当然我们依旧不提倡。原因我们之后慢慢揭晓。","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"bootstrap之model填坑","date":"2017-03-23T09:30:33.000Z","path":"2017/03/23/bootstrap-model/","text":"bootstrap是我最早听说的前端框架，以其简单实用，栅格式布局的响应移动端，一度成为搭建后台乃至前台界面的顶梁柱。 之前看过很多次都没有把模态框(model)搞懂，这次来，就是为了填坑。不搞懂，不睡觉。(立FLAG小王子^_^) 对于这个模态框，我想先从最简单的文档开始，然后追溯他的源码。 闲话:现在是凌晨快一点，是惰性最凶猛的时候，和别人差距那么大，骚年，继续吧。 对于bootstrap的基本css不想再在这里絮叨，之后会开一个帖子关于自己带有后台管理的博客系统，那里会着重使用这些强大的框架，完成后台的搭建工作。现在就着眼model，goal:实现model的熟练使用，了解model的核心思想。 版本:bootstrap v3, 参考网址(bootstrap中文网) 模态框的js是model.js，因为是针对此模块的实验，所以只引用此js，但是因为bootstrap的js全部依赖于jquery，所以在引用model.js之前把jquery引进去，否则找不到原因，会很*疼~用前须知： 不支持同时打开多个模态框千万不要在一个模态框上重叠另一个模态框。要想同时支持多个模态框，需要自己写额外的代码来实现。 模态框的HTML代码放置的位置务必将模态框的 HTML 代码放在文档的最高层级内（也就是说，尽量作为 body标签的直接子元素），以避免其他组件影响模态框的展现和/或功能。","tags":[{"name":"bootstrap","slug":"bootstrap","permalink":"http://yoursite.com/tags/bootstrap/"},{"name":"model","slug":"model","permalink":"http://yoursite.com/tags/model/"}]},{"title":"monolog & mongodb的强强联手","date":"2017-03-22T14:55:29.000Z","path":"2017/03/22/monolog-mongodb/","text":"monolog和mongodb的强强联手网站日志管理中将这两把利剑同时使用，效果如何，之后续……因为这个日志管理还没做完，我边搜集资料边完成项目，文章会从“这是什么”，“为什么要用它”，“如何用”这三个方面展开。 首先介绍一下这两位superstar: monolog Monolog是php下比较全又容易扩展的记录日志类库。目前有包括Symfony 、Laravel、 CakePHP等诸多知名php框架都内置了Monolog。Monolog可以把你的日志发送到文件，sockets，收件箱，数据库。Monolog遵循PSR3的接口规范，可以很轻易的替换成其他遵循同一规范的日志类库。Monolog具有良好的扩展性，通过Handler、Formatter和Processor这几个接口，可以对Monolog类库进行各种扩展和自定义。 mongodb MongoDB is not a key/value store, it’s quite a bit more. It’s definitely nota RDBMS either. It seems to be very performant and either has.I think Mongo might be the closest thing to a RDBMS replacement that I’veseen so far.It won’t work for all data setsand access patterns, but it’s built for your typical CRUD stuff. Storing whatis essentially a huge hash, and being able to select on any of those keys, iswhat most people use a relational database for. If your DB is 3NF and youdon’t do any joins (you’re just selecting a bunch of tables and putting allthe objects together, AKA what most people do in a web app), MongoDB wouldprobably kick ass for you. 如何让他们强强联合？最重要的地方来了，既然mongodb和monolog是这么牛，拓展性一定不差，对！ 我们去monolog里看看，有没有能连接到mongodb的接口啥的……五分钟后……1234567891011121314class MongoDBHandler extends AbstractProcessingHandler&#123; protected $mongoCollection; public function __construct($mongo, $database, $collection, $level = Logger::DEBUG, $bubble = true) &#123; if (!($mongo instanceof \\MongoClient || $mongo instanceof \\Mongo || $mongo instanceof \\MongoDB\\Client)) &#123; throw new \\InvalidArgumentException('MongoClient, Mongo or MongoDB\\Client instance required'); &#125; $this-&gt;mongoCollection = $mongo-&gt;selectCollection($database, $collection); parent::__construct($level, $bubble); &#125;","tags":[{"name":"monolog","slug":"monolog","permalink":"http://yoursite.com/tags/monolog/"},{"name":"mongodb","slug":"mongodb","permalink":"http://yoursite.com/tags/mongodb/"}]}]